# target_version:
# rubocop v0.54.0

# Cop name を常に表示する
# - 名前がわからないと rubocop の設定がしづらい
# - 名前がわからないと disable コメントも書けない
AllCops:
  DisplayCopNames: true
  DisplayStyleGuide: true
  StyleGuideBaseURL: https://github.com/fortissimo1997/ruby-style-guide/blob/japanese/README.ja.md
  ExtraDetails: true

# ============================================================
# Style
# ============================================================
# 日本語コメントを許可
Style/AsciiComments:
  Enabled: false

# do .. end から更にメソッドチェーンすると見づらいので
# auto-correct せず、自分で修正する
# spec 内は見た目が綺麗になるので許可
Style/BlockDelimiters:
  AutoCorrect: false

# namespace 付きのクラスはかなり頻繁に作るので簡単に書きたい。
Style/ClassAndModuleChildren:
  Enabled: false

#Style/CollectionMethods 自体は無効になっているのだが、
# デフォルト値から変えたのは
#   find -> detect
#     ActiveRecord の find と間違えやすいため
Style/CollectionMethods:
  PreferredMethods:
    find: 'detect'

# ドキュメントの無い public class を許可する
Style/Documentation:
  Enabled: false

# !! のイディオムは使ってもよいと思うので
Style/DoubleNegation:
  Enabled: false

# これがあると
# undefined method `begin_pos' for #<Parser::Source::Map::Condition:0x007f4ebf1974a8>
# で落ちることがあるのでコメントアウト
## elseの中に明示的にnilを書くのを許可する
#Style/EmptyElse:
#  EnforcedStyle: nil

# 別にsprintfでもformatでもString#%でもよいと思うので
Style/FormatString:
  Enabled: false

# まだ対応するには早い
Style/FrozenStringLiteralComment:
  Enabled: false

# if 文の中に 5 行程度のブロックを書くぐらいは許容した方が現実的かなぁと
Style/GuardClause:
  MinBodyLength: 5

# 条件式の方を意識させたい場合には後置の if/unless を使わない方が分かりやすい
Style/IfUnlessModifier:
  Enabled: false

# scope 等は複数行でも lambda ではなく ->{} を使いたい
Style/Lambda:
  EnforcedStyle: literal

# 1_000_000 と区切り文字が 2 個以上必要になる場合のみ _ 区切りを必須にする
Style/NumericLiterals:
  MinDigits: 7

# 正規表現にマッチさせた時の特殊変数の置き換えは Regex.last_match ではなく
# 名前付きキャプチャを使って参照したいので auto-correct しない
Style/PerlBackrefs:
  AutoCorrect: false

# has_ から始まるメソッドは許可する
Naming/PredicateName:
  ForbiddenPrefixes:
    - is_
    - have_
  NamePrefix:
    - is_
    - have_

# ローカル変数とメソッド呼び出しの区別をつけた方が分かりやすい場合が多い
Style/RedundantSelf:
  Enabled: false

# いくらなんでも inject { |a, e| } は短すぎるので分かりやすい名前をつけたい
Style/SingleLineBlockParams:
  Enabled: false

# 複数行の場合はケツカンマを入れる
Style/TrailingCommaInHashLiteral:
  EnforcedStyleForMultiline: comma

Style/TrailingCommaInArrayLiteral:
  EnforcedStyleForMultiline: comma

# rubocop 本体でまだデフォルト設定がPendingのルールの有効・無効設定
Lint/DuplicateRegexpCharacterClassElement: # (new in 1.1)
  Enabled: true
Lint/EmptyBlock: # (new in 1.1)
  Enabled: true
Lint/ToEnumArguments: # (new in 1.1)
  Enabled: true
Lint/UnmodifiedReduceAccumulator: # (new in 1.1)
  Enabled: true
Style/ArgumentsForwarding: # (new in 1.1)
  Enabled: true
Style/DocumentDynamicEvalDefinition: # (new in 1.1)
  Enabled: false
Style/SwapValues: # (new in 1.1)
  Enabled: true
Lint/NoReturnInBeginEndBlocks: # (new in 1.2)
  Enabled: true
Style/CollectionCompact: # (new in 1.2)
  Enabled: true
Style/NegatedIfElseCondition: # (new in 1.2)
  Enabled: true
Lint/DuplicateBranch: # (new in 1.3)
  Enabled: true
Lint/EmptyClass: # (new in 1.3)
  Enabled: true
Style/NilLambda: # (new in 1.3)
  Enabled: true
Style/RedundantArgument: # (new in 1.4)
  Enabled: false
Lint/UnexpectedBlockArity: # (new in 1.5)
  Enabled: true
Layout/SpaceBeforeBrackets: # (new in 1.7)
  Enabled: true
Lint/AmbiguousAssignment: # (new in 1.7)
  Enabled: true
Style/HashExcept: # (new in 1.7)
  Enabled: true
Lint/DeprecatedConstants: # (new in 1.8)
  Enabled: true
Lint/LambdaWithoutLiteralBlock: # (new in 1.8)
  Enabled: true
Lint/NumberedParameterAssignment: # (new in 1.9)
  Enabled: true
Lint/OrAssignmentToConstant: # (new in 1.9)
  Enabled: true
Lint/RedundantDirGlobSort: # (new in 1.8)
  Enabled: true
Lint/SymbolConversion: # (new in 1.9)
  Enabled: true
Lint/TripleQuotes: # (new in 1.9)
  Enabled: true
Style/EndlessMethod: # (new in 1.8)
  Enabled: true
Style/IfWithBooleanLiteralBranches: # (new in 1.9)
  Enabled: true
Gemspec/DateAssignment: # (new in 1.10)
  Enabled: true
Style/HashConversion: # (new in 1.10)
  Enabled: true
Style/StringChars: # (new in 1.12)
  Enabled: true

# ============================================================
# Lint
# ============================================================

# RuntimeError は「特定の Error を定義できない場合」なので、
# 定義できるエラーは RuntimeError ではなく StandardError を継承する。
Lint/InheritException:
  EnforcedStyle: standard_error

# * 同名のメソッドがある場合にローカル変数に `_` を付ける
# * 一時変数として `_` を付ける
# というテクニックは頻出する
Lint/UnderscorePrefixedVariableName:
  Enabled: false

# 子クラスで実装させるつもりのメソッドで引っかかるので
Lint/UnusedMethodArgument:
  Enabled: false

# ============================================================
# Metrics
# ============================================================

# 30 ぐらいまでは許容してもいいのでは
Metrics/AbcSize:
  Max: 30

# 20くらいは別によいと思う
Metrics/MethodLength:
  Max: 20

# ============================================================
# Layout
# ============================================================

# 複数行にわたるメソッド呼び出しを行う場合は最初の引数の前に改行を入れる
# * 横に長くなりづらい
# * メソッド名の長さが変わったときに diff が少ない
Layout/FirstArrayElementIndentation:
  EnforcedStyle: consistent

# 80では短すぎる。かといって長すぎてもgithub上のコードレビューがやり辛いという問題があるので制限は必要
Layout/LineLength:
  Max: 160
